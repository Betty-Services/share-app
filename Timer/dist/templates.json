[{"name":"Timer","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","styleType":"BUTTON","jsx":"(() => {\n  const {\n    CircularProgress,\n    Tooltip\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    timerProperty,\n    daysNotation,\n    hoursNotation,\n    minutesNotation,\n    secondsNotation,\n    doneText,\n    disabled,\n    size,\n    type,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    openLinkToExternal,\n    visible,\n    actionId,\n    buttonText,\n    actionModels,\n    addTooltip,\n    hasVisibleTooltip,\n    tooltipContent,\n    tooltipPlacement\n  } = options;\n  const {\n    env,\n    getModel,\n    getIdProperty,\n    useText,\n    useAction,\n    useProperty,\n    useEndpoint\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = !!actionId;\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const linkToInternalVariable = linkTo && linkTo.id !== '' && useEndpoint(linkTo);\n  const buttonContent = useText(buttonText);\n  const tooltipText = useText(tooltipContent);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(hasVisibleTooltip);\n  const [, setOptions] = useOptions();\n  const [isDisabled, setIsDisabled] = useState(disabled);\n  const timerProp = !isDev ? useProperty(timerProperty) : null;\n  const parsedDoneText = useText(doneText);\n  const [timerDone, setTimerDone] = useState(false);\n  const timer = useRef(null);\n  const timerComponents = [];\n\n  const camelToSnakeCase = str => str[0].toLowerCase() + str.slice(1, str.length).replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\n  const input = !isDev && actionModels ? actionModels.reduce((acc, value) => {\n    const propertyUuid = getIdProperty(value);\n    const model = getModel(value);\n    const recordId = propertyUuid && useProperty(propertyUuid);\n\n    if (recordId !== undefined) {\n      acc[camelToSnakeCase(model.name)] = {\n        variable_id: recordId\n      };\n    }\n\n    return acc;\n  }, {}) : {};\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n\n  const calculateTimeLeft = () => {\n    if (!timerDone) {\n      const timeEnd = new Date(timerProp);\n      const difference = +timeEnd - +new Date();\n      let timeLeft = {};\n\n      if (difference > 0) {\n        timeLeft = {\n          [daysNotation]: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          [hoursNotation]: Math.floor(difference / (1000 * 60 * 60) % 24),\n          [minutesNotation]: Math.floor(difference / 1000 / 60 % 60),\n          [secondsNotation]: Math.floor(difference / 1000 % 60)\n        };\n      } else {\n        clearInterval(timer);\n        setTimerDone(true);\n      }\n\n      return timeLeft;\n    }\n\n    return {};\n  };\n\n  const [timeLeft, setTimeLeft] = useState({});\n  useEffect(() => {\n    if (timerDone && isVisible) {\n      actionCallback();\n      B.triggerEvent('onTimerDone');\n    }\n  }, [timerDone]);\n  useEffect(() => {\n    if (!timerDone && isVisible) {\n      timer = setInterval(() => {\n        setTimeLeft(calculateTimeLeft());\n      }, 1000);\n    }\n  }, [isVisible]);\n  Object.keys(timeLeft).forEach(interval => {\n    if (!timeLeft[interval]) {\n      return;\n    }\n\n    timerComponents.push(<span className={classes.times}>{`${timeLeft[interval]}${interval} `}</span>);\n  });\n  useEffect(() => {\n    setIsVisible(visible);\n    setIsOpen(hasVisibleTooltip);\n  }, [visible, hasVisibleTooltip]);\n  useEffect(() => setOptions({\n    disabled: isDisabled\n  }), [isDisabled]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Toggle loading state', () => setIsLoading(s => !s));\n  B.defineFunction('Enable', () => setIsDisabled(false));\n  B.defineFunction('Disable', () => setIsDisabled(true));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n\n  const getExternalHref = config => {\n    if (config.disabled) {\n      return false;\n    }\n\n    if (config.linkToExternal && config.linkToExternal.id !== '') {\n      return config.linkToExternalVariable;\n    }\n\n    return false;\n  };\n\n  const getInternalHref = config => {\n    if (config.disabled) {\n      return false;\n    }\n\n    if (config.linkTo && config.linkTo.id !== '') {\n      return config.linkToInternalVariable;\n    }\n\n    return false;\n  };\n\n  const showIndicator = isLoading || loading;\n\n  const emptySpace = () => {\n    if (icon === 'None') {\n      return '\\xA0';\n    }\n\n    return null;\n  };\n\n  const buttonProps = {\n    disabled: disabled || isLoading || loading,\n    tabindex: isDev && -1,\n    onClick: event => {\n      event.stopPropagation();\n    },\n    role: 'button',\n    type: isDev ? 'button' : type,\n    endpoint: linkType === 'internal' && linkTo && linkTo.id ? linkTo : undefined\n  };\n  const anchorProps = {\n    href: linkType === 'external' ? getExternalHref({\n      disabled,\n      linkToExternal,\n      linkToExternalVariable\n    }) : getInternalHref({\n      linkTo,\n      linkToInternalVariable,\n      disabled\n    }),\n    target: openLinkToExternal,\n    tabindex: isDev && -1,\n    type: isDev ? 'button' : type,\n    endpoint: linkType === 'internal' && linkTo && linkTo.id ? linkTo : undefined,\n    onClick: event => {\n      event.stopPropagation();\n    }\n  };\n  const ButtonContent = <div className={[classes.root, disabled ? classes.disabled : ''].join(' ')}>\n\t\t\t\t<span className={classes.innerRoot}>\n\t\t\t\t\t<>\n\t\t\t\t\t\t&#8203;\n\t\t\t\t\t\t{icon !== 'None' && iconPosition === 'start' && <span style={{\n          marginRight: buttonContent ? '5px' : 0,\n          display: 'flex'\n        }}>\n\t\t\t\t\t\t\t\t{React.createElement(Icons[icon], {\n            fontSize: size\n          })}\n\t\t\t\t\t\t\t</span>}\n\t\t\t\t\t\t{buttonContent ? buttonContent : emptySpace}\n\t\t\t\t\t\t{timerComponents.length || isDev ? timerComponents : <span>{timerDone && parsedDoneText}</span>}\n\t\t\t\t\t\t{icon !== 'None' && iconPosition === 'end' && <span style={{\n          marginLeft: buttonContent ? '5px' : 0,\n          display: 'flex'\n        }}>\n\t\t\t\t\t\t\t\t{React.createElement(Icons[icon], {\n            fontSize: size\n          })}\n\t\t\t\t\t\t\t</span>}\n\t\t\t\t\t</>\n\t\t\t\t\t{showIndicator && <CircularProgress size={16} className={classes.loader} />}\n\t\t\t\t</span>\n\t\t\t</div>;\n  const AnchorElement = <a className={classes.anchor} {...anchorProps}>\n\t\t\t\t{ButtonContent}\n\t\t\t</a>;\n  const ButtonElement = <button type='button' className={classes.button} {...buttonProps}>\n\t\t\t\t{ButtonContent}\n\t\t\t</button>;\n  const ButtonComponent = type === 'submit' ? ButtonElement : AnchorElement;\n  let tooltipProps = {\n    title: tooltipText,\n    placement: tooltipPlacement,\n    arrow: true,\n    classes: {\n      tooltip: classes.tooltip,\n      arrow: classes.arrow\n    }\n  };\n\n  if (isDev) {\n    tooltipProps = { ...tooltipProps,\n      open: isOpen\n    };\n  }\n\n  const ButtonWithTooltip = <Tooltip {...tooltipProps}>{ButtonComponent}</Tooltip>;\n  const Button = addTooltip ? ButtonWithTooltip : ButtonComponent;\n\n  if (!isDev) {\n    if (!isVisible) {\n      return <></>;\n    }\n\n    return Button;\n  }\n\n  return <div className={classes.wrapper}>{Button}</div>;\n})()","styles":"B => t => {\n  const {\n    mediaMinWidth,\n    Styling\n  } = B;\n  const newStyling = new Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : newStyling.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'flex' : 'inline-block',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    anchor: {\n      textDecoration: 'none',\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'inline-flex' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => !fullWidth ? 'auto' : `calc(100% - ${getSpacing(outerSpacing[1])} - ${getSpacing(outerSpacing[3])})`,\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${mediaMinWidth(600)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n          const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${mediaMinWidth(960)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n          const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${mediaMinWidth(1280)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n          const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    button: {\n      border: 'none',\n      background: 'transparent',\n      padding: 0,\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${mediaMinWidth(600)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n          const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${mediaMinWidth(960)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n          const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${mediaMinWidth(1280)}`]: {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n          const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    root: ({\n      style\n    }) => ({ ...style,\n      boxSizing: 'border-box',\n      display: 'flex',\n      width: '100%',\n      justifyContent: 'center',\n      alignItems: 'center',\n      textTransform: 'none',\n      '&:hover': {\n        filter: 'brightness(90%)'\n      },\n      '&:active, &:focus': {\n        filter: 'brightness(85%)',\n        outline: 'none'\n      }\n    }),\n    innerRoot: {\n      display: 'flex',\n      alignItems: 'center',\n      minHeight: '1.25rem'\n    },\n    disabled: {\n      opacity: '50%',\n      boxShadow: 'none',\n      filter: 'grayscale(100%)',\n      pointerEvents: 'none'\n    },\n    loader: {\n      color: 'inherit!important',\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    },\n    tooltip: {\n      backgroundColor: ({\n        options: {\n          tooltipBackground\n        }\n      }) => [newStyling.getColor(tooltipBackground), '!important'],\n      color: ({\n        options: {\n          tooltipText\n        }\n      }) => [newStyling.getColor(tooltipText), '!important']\n    },\n    arrow: {\n      color: ({\n        options: {\n          tooltipBackground\n        }\n      }) => [newStyling.getColor(tooltipBackground), '!important']\n    },\n    times: {\n      marginLeft: '2px'\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Toggle loading state","Enable","Disable"],"triggers":["onActionSuccess","onActionError","onTimerDone","onActionLoad"],"interactions":{},"componentHash":"e788818c3ab670a3b293f2c3f78237cb9c0de53c38b218911c376f1ed3551d7b"}]
