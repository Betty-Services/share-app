[{"name":"WeekPicker","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    placeholder,\n    variant,\n    inputvariant,\n    dateFormat,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    disableToolbar,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute,\n    locale,\n    clearable\n  } = options;\n  const {\n    env,\n    getCustomModelAttribute,\n    useText\n  } = B;\n  const {\n    MuiPickersUtilsProvider,\n    DatePicker\n  } = window.MaterialUI.Pickers;\n  const {\n    IconButton\n  } = window.MaterialUI.Core;\n  const clsx = window.clsx;\n  const moment = window.moment;\n  const MomentUtils = window.MomentUtils;\n  const {\n    momentNlLocale,\n    momentEnLocale\n  } = window.MaterialUI.MomentDateLocales;\n  const isDev = env === 'dev';\n  const [selectedDate, setSelectedDate] = useState(null);\n  const helper = useText(helperText);\n  const placeholderText = useText(placeholder);\n  const localeMap = {\n    nl: momentNlLocale,\n    en: momentEnLocale\n  };\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = [],\n    required: defaultRequired = false\n  } = customModelAttributeObj;\n  const strDefaultValue = useText(defaultValue, {\n    rawValue: true\n  });\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required: attributeRequired\n    } = {}\n  } = customModelAttribute || {};\n  const required = customModelAttribute ? attributeRequired : defaultRequired;\n  const nameAttributeValue = useText(nameAttribute);\n\n  const isValidDate = date => date && date.isValid() && !isNaN(date);\n\n  const changeHandler = date => {\n    B.triggerEvent('onChange', date);\n\n    if (date) {\n      setSelectedDate(date.startOf('isoWeek'));\n    } else {\n      setSelectedDate(null);\n    }\n  };\n\n  const setDefaultDate = () => {\n    if (!selectedDate && strDefaultValue) {\n      const propDefaultParse = moment(strDefaultValue);\n\n      if (isValidDate(propDefaultParse)) {\n        setSelectedDate(propDefaultParse);\n      } else {\n        setSelectedDate(moment('00:00:00').format('HH:mm:ss'));\n      }\n    }\n  };\n\n  B.defineFunction('Clear', () => setSelectedDate(null));\n  !isDev && setDefaultDate();\n  const resultString = isValidDate(selectedDate) ? moment(selectedDate).format('YYYY-MM-DD') : null;\n\n  const formatWeekSelectLabel = date => {\n    if (date) return moment(date).format(dateFormat);\n    return '';\n  };\n\n  const wrappedWeekDay = (date, selectedDate, dayInCurrentMonth) => {\n    let selectedDateClone = selectedDate.clone();\n    const start = selectedDateClone.startOf('week').toDate();\n    const end = selectedDateClone.endOf('week').toDate();\n    const dayIsBetween = date.isBetween(start, end, null, []);\n    const isFirstDay = date.isSame(start, 'day');\n    const isLastDay = date.isSame(end, 'day');\n    const isFirstDayOfWeek = date.isoWeekday() === 1;\n    const isWeekActive = date.isoWeek() === selectedDate.isoWeek();\n    const wrapperClassName = clsx({\n      [classes.default]: !dayIsBetween && !isFirstDay && !isLastDay && !isFirstDayOfWeek,\n      [classes.highlight]: dayIsBetween,\n      [classes.firstHighlight]: isFirstDay,\n      [classes.endHighlight]: isLastDay,\n      [classes.firstDayOfWeek]: isFirstDayOfWeek\n    });\n    const dayClassName = clsx({\n      [classes.day]: true,\n      [classes.nonCurrentMonthDay]: !dayInCurrentMonth,\n      [classes.highLightNonCurrentMonthDay]: !dayInCurrentMonth && dayIsBetween\n    });\n    const weekNumberClassName = clsx({\n      [classes.weekNumber]: true,\n      [classes.weekNumberHighlight]: isWeekActive\n    });\n    return <div className={classes.dayWrapper}>\n\t\t\t\t\t{isFirstDayOfWeek && <div className={weekNumberClassName}>{date.isoWeek()}</div>}\n\t\t\t\t\t<div className={wrapperClassName}>\n\t\t\t\t\t\t<IconButton className={dayClassName}>\n\t\t\t\t\t\t\t<span>{date.format('DD')}</span>\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</div>\n\t\t\t\t</div>;\n  };\n\n  const inputProps = {\n    name: nameAttributeValue || customModelAttributeName,\n    tabIndex: isDev && -1\n  };\n  const popoverProps = {\n    classes: {\n      root: classes.popover\n    }\n  };\n  const DateCmp = <DatePicker name={nameAttributeValue || customModelAttributeName} value={selectedDate} size={size} autoOk={true} classes={{\n    root: classes.formControl\n  }} variant={variant} placeholder={placeholderText} fullWidth={fullWidth} onChange={changeHandler} inputVariant={inputvariant} InputProps={{\n    inputProps: inputProps\n  }} required={required} disabled={disabled} label={!hideLabel && labelText} error={error} margin={margin} helperText={helper} disableToolbar={disableToolbar} format='dd-mm-yyyy' PopoverProps={popoverProps} DialogProps={{\n    className: classes.dialog\n  }} clearable={clearable} renderDay={wrappedWeekDay} labelFunc={formatWeekSelectLabel} />;\n  return isDev ? <div className={classes.root}>\n\t\t\t\t<MuiPickersUtilsProvider utils={MomentUtils} libInstance={moment} locale={localeMap[locale]}>\n\t\t\t\t\t{variant === 'static' ? <div className={classes.static}>{DateCmp}</div> : DateCmp}\n\t\t\t\t</MuiPickersUtilsProvider>\n\t\t\t</div> : <MuiPickersUtilsProvider utils={MomentUtils} locale={localeMap[locale]}>\n\t\t\t\t<input type='hidden' name={nameAttributeValue || customModelAttributeName} value={resultString} />\n\t\t\t\t{variant === 'static' ? <div className={classes.static}>{DateCmp}</div> : DateCmp}\n\t\t\t</MuiPickersUtilsProvider>;\n})()","styles":"B => t => {\n  const {\n    Styling\n  } = B;\n  const style = new Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    dialog: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      },\n      '& .MuiButton-textPrimary': {\n        color: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    popover: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    formControl: {\n      '& > label': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        zIndex: ({\n          options: {\n            inputvariant\n          }\n        }) => inputvariant === 'standard' ? 1 : null,\n        '&.Mui-focused': {\n          color: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        },\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    },\n    static: {\n      '& .MuiPickersStaticWrapper-staticWrapperRoot': {\n        '& .MuiToolbar-root, & .MuiPickersDay-daySelected': {\n          backgroundColor: ({\n            options: {\n              backgroundColorPopup\n            }\n          }) => [style.getColor(backgroundColorPopup), '!important']\n        }\n      }\n    },\n    default: {\n      color: 'inherit'\n    },\n    highlight: {\n      backgroundColor: ({\n        options: {\n          backgroundColorPopup\n        }\n      }) => [style.getColor(backgroundColorPopup), '!important'],\n      color: '#fff'\n    },\n    endHighlight: {\n      extend: 'highlight',\n      borderTopRightRadius: '50%',\n      borderBottomRightRadius: '50%'\n    },\n    firstHighlight: {\n      extend: 'highlight',\n      borderTopLeftRadius: '50%',\n      borderBottomLeftRadius: '50%'\n    },\n    dayWrapper: {\n      position: 'relative'\n    },\n    day: {\n      width: 36,\n      height: 36,\n      fontSize: '12px !important',\n      margin: '0 2px !important',\n      color: 'inherit !important'\n    },\n    customDayHighlight: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: '2px',\n      right: '2px'\n    },\n    weekNumber: {\n      position: 'absolute',\n      fontSize: '12px',\n      color: '#000',\n      opacity: 0.3,\n      top: 7,\n      left: -12,\n      padding: 4,\n      width: 15,\n      height: 15,\n      textAlign: 'center'\n    },\n    weekNumberHighlight: {\n      backgroundColor: ({\n        options: {\n          backgroundColorPopup\n        }\n      }) => [style.getColor(backgroundColorPopup), '!important'],\n      borderRadius: '50%',\n      opacity: 1,\n      color: '#fff'\n    },\n    nonCurrentMonthDay: {\n      color: '#C6C6C6 !important'\n    },\n    highLightNonCurrentMonthDay: {\n      color: '#676767 !important'\n    }\n  };\n}","functions":["Clear"],"triggers":["onChange"],"interactions":{},"componentHash":"5392c0300c166507740e48149976b3e0f214de34100221472f1fa82be1a8d7d8"}]
