[{"name":"MicrosoftUploader","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","styleType":"BUTTON","jsx":"(() => {\n  const {\n    useText,\n    env,\n    getCustomModelAttribute,\n    useAction\n  } = B;\n  const {\n    clientId,\n    tenantId,\n    redirectUri,\n    authenticationType,\n    accessToken,\n    margin,\n    hideLabel,\n    labelText,\n    rootFolder,\n    fullWidth,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute,\n    idAttribute,\n    actionId\n  } = options;\n  const isDev = env === 'dev';\n  const mounted = useRef(false);\n\n  const formatBytes = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat(bytes / k ** i).toFixed()} ${sizes[i]}`;\n  };\n\n  const nameAttributeValue = useText(nameAttribute);\n  const idAttributeValue = useText(idAttribute);\n  const {\n    id: customModelAttributeId,\n    label = [],\n    required: defaultRequired = false\n  } = customModelAttributeObj;\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required: attributeRequired\n    } = {}\n  } = customModelAttribute || {};\n  const {\n    Client,\n    LargeFileUploadTask,\n    FileUpload\n  } = window.MicrosoftServices.MicrosoftGraph;\n  const {\n    AuthCodeMSALBrowserAuthenticationProvider\n  } = window.MicrosoftServices.MicrosoftGraphMsal;\n  const {\n    PublicClientApplication,\n    InteractionType\n  } = window.MicrosoftServices.msal;\n  const {\n    LinearProgress,\n    FormControl,\n    Typography\n  } = window.MaterialUI.Core;\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [result, setResult] = useState(null);\n  const [inputFileName, setInputFileName] = useState(null);\n  const inputRef = React.createRef();\n  const clientIdText = useText(clientId);\n  const tenantIdText = useText(tenantId);\n  const redirectUriText = useText(redirectUri);\n  const accessTokenText = useText(accessToken);\n  const [actionCallback] = useAction(actionId);\n  const [disabled, setDisabled] = useState(false);\n\n  const getGraphClient = async () => {\n    if (authenticationType === 'client') {\n      const msalConfig = {\n        auth: {\n          clientId: clientIdText,\n          authority: `https://login.microsoftonline.com/${tenantIdText}`,\n          redirectUri: redirectUriText\n        }\n      };\n      const msalRequest = {\n        scopes: ['User.Read', 'Files.ReadWrite', 'Files.ReadWrite.All']\n      };\n      const msalClient = new PublicClientApplication(msalConfig);\n      await msalClient.loginPopup(msalRequest);\n      const clientOptions = {\n        account: msalClient.getAllAccounts()[0],\n        interactionType: InteractionType.PopUp,\n        scopes: ['User.Read', 'Files.ReadWrite', 'Files.ReadWrite.All']\n      };\n      const authProvider = new AuthCodeMSALBrowserAuthenticationProvider(msalClient, clientOptions);\n      return Client.initWithMiddleware({\n        authProvider\n      });\n    }\n\n    return Client.init({\n      authProvider: done => {\n        done(null, accessTokenText);\n      }\n    });\n  };\n\n  const startUpload = async event => {\n    event.preventDefault();\n    const graphClient = await getGraphClient();\n    const file = inputRef.current.files[0];\n    const filename = file.name;\n    const uploadEventHandlers = {\n      progress: range => {\n        const progressPerc = range.maxValue / file.size * 100;\n        setUploadProgress(Math.round(progressPerc));\n      },\n      extraCallBackParam: ''\n    };\n    const uploadTaskOptions = {\n      rangeSize: 1024 * 1024,\n      uploadEventHandlers\n    };\n    const payload = {\n      item: {\n        '@microsoft.graph.conflictBehavior': 'rename'\n      }\n    };\n    const uploadUrl = rootFolder + filename + ':/createUploadSession';\n    setDisabled(true);\n\n    if (authenticationType === 'action') {\n      const result = await actionCallback();\n      accessTokenText = result.data.actionb5;\n    }\n\n    const uploadSession = await LargeFileUploadTask.createUploadSession(graphClient, uploadUrl, payload);\n    const fileObject = new FileUpload(file, file.name, file.size);\n    const uploadTask = new LargeFileUploadTask(graphClient, fileObject, uploadSession, uploadTaskOptions);\n    const uploadResult = await uploadTask.upload();\n    setResult({\n      id: uploadResult.responseBody.id,\n      name: uploadResult.responseBody.name,\n      size: uploadResult.responseBody.size,\n      fileType: uploadResult.responseBody.file.mimeType,\n      downloadurl: uploadResult.responseBody['@content.downloadUrl']\n    });\n    setUploadProgress(100);\n    B.triggerEvent('onSuccess');\n    setclassNames({\n      barColorPrimary: classes.readyBackgroundColor\n    });\n  };\n\n  const Label = isDev ? 'div' : 'label';\n  const [classNames, setclassNames] = useState({\n    colorPrimary: classes.lighterBackgroundColor,\n    barColorPrimary: classes.normalBackgroundColor\n  });\n\n  const inputChange = event => {\n    setInputFileName(inputRef.current.files[0].name);\n  };\n\n  const afterSelect = event => {\n    if (authenticationType === 'client') {\n      inputChange(event);\n    } else {\n      startUpload(event);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      B.triggerEvent('onExpired');\n    }, 300000);\n    return () => clearTimeout(timer);\n  }, []);\n  B.defineFunction('SelectFile', () => {\n    inputRef.current.click();\n  });\n  useEffect(() => {\n    mounted.current = true;\n    B.triggerEvent('onComponentRendered');\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return <div className={classes.root}>\n        <FormControl fullWidth={fullWidth} margin={margin}>\n          <Label className={classes.label}>\n            <div className={[classes.root, disabled ? classes.disabled : ''].join(' ')}>\n              <span className={classes.submitButton}>\n                {inputFileName ? inputFileName : 'Select file...'}\n              </span>\n              <input ref={inputRef} type=\"file\" className={classes.input} onChange={afterSelect} disabled={disabled} />\n            </div>\n          </Label>\n        </FormControl>\n        {inputFileName && <div>\n            <a onClick={startUpload} className={classes.submitButton}>\n              Upload\n            </a>\n          </div>}\n        <div className={classes.progress}>\n          <LinearProgress variant=\"determinate\" value={uploadProgress} classes={classNames} />\n        </div>\n        <div>\n          <input type=\"hidden\" name={nameAttributeValue || customModelAttributeName} value={result && result.name} />\n          <input type=\"hidden\" name={idAttributeValue} value={result && result.id} />\n          {result && <div className={classes.fileDetails}>\n              <Typography variant=\"body1\" noWrap className={classes.span}>\n                {result ? result.name : 'File name'}\n              </Typography>\n              <div className={classes.fileDetailList}>\n                <p className={classes.fileDetail}>\n                  {isDev ? 'Size' : formatBytes(result.size)}\n                </p>\n                <div className={classes.divider} />\n                <p className={classes.fileDetail}>\n                  {isDev ? 'Type' : result.fileType.replace('image/', '.')}\n                </p>\n              </div>\n            </div>}\n        </div>\n      </div>;\n})()","styles":"B => t => {\n  const {\n    color: colorFunc,\n    Styling\n  } = B;\n  const style = new Styling(t);\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  const getLighterColor = (col, val) => colorFunc.lighten(col, val);\n\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block'\n    },\n    submitButton: ({\n      style\n    }) => ({ ...style,\n      display: 'inline-block',\n      cursor: 'pointer',\n      '&:hover': {\n        filter: 'brightness(90%)'\n      },\n      '&:active, &:focus': {\n        filter: 'brightness(85%)',\n        outline: 'none'\n      }\n    }),\n    fileDetails: {\n      flexGrow: 1,\n      maxWidth: 'auto',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    fileDetail: {\n      margin: 0,\n      color: t.colors.medium\n    },\n    fileDetailList: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    label: {\n      marginLeft: '0!important',\n      alignItems: 'start!important',\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      },\n      '&.Mui-disabled': {\n        pointerEvents: 'none',\n        opacity: '0.7'\n      }\n    },\n    divider: {\n      width: '0.1875rem',\n      height: '0.1875rem',\n      borderRadius: '50%',\n      marginLeft: '1rem',\n      backgroundColor: t.colors.light,\n      marginRight: '1rem'\n    },\n    progress: {\n      width: '100%',\n      marginTop: '10px',\n      marginBottom: '10px'\n    },\n    normalBackgroundColor: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    lighterBackgroundColor: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [getLighterColor(style.getColor(color), 0.7), '!important']\n    },\n    lighterDashedColor: {\n      backgroundImage: ({\n        options: {\n          color\n        }\n      }) => [`radial-gradient(${getLighterColor(style.getColor(color), 0.7)} 0%, ${getLighterColor(style.getColor(color), 0.7)} 16%, transparent 42%)`, '!important']\n    },\n    readyBackgroundColor: {\n      backgroundColor: ({\n        options: {\n          readyColor\n        }\n      }) => [style.getColor(readyColor), '!important']\n    },\n    disabled: {\n      opacity: '50%',\n      boxShadow: 'none',\n      filter: 'grayscale(100%)',\n      pointerEvents: 'none'\n    },\n    input: {\n      display: 'none'\n    }\n  };\n}","functions":["SelectFile"],"triggers":["onSuccess","onExpired","onComponentRendered"],"interactions":{},"componentHash":"99cef59822bb22ef728b3a3ad9dc3805147d8b039c1e82b9ec59683f5f47da6e"},{"name":"HelloWorld","type":"CONTENT_COMPONENT","icon":"TitleIcon","orientation":"HORIZONTAL","allowedTypes":[],"jsx":"(() => {\n  const Tag = {\n    Title1: 'h1',\n    Title2: 'h2',\n    Title3: 'h3',\n    Title4: 'h4',\n    Title5: 'h5',\n    Title6: 'h6',\n    Body1: 'p',\n    Body2: 'p'\n  }[options.type || 'Title1'];\n  return <Tag className={classes.root}>{options.content}</Tag>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      boxSizing: 'border-box',\n      position: 'relative',\n      width: '100%',\n      margin: 0,\n      paddingTop: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[0], 'Desktop'),\n      paddingRight: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[1], 'Desktop'),\n      paddingBottom: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[2], 'Desktop'),\n      paddingLeft: ({\n        options: {\n          padding\n        }\n      }) => style.getSpacing(padding[3], 'Desktop'),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      fontWeight: ({\n        options: {\n          type\n        }\n      }) => style.getFontWeight(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      textAlign: ({\n        options: {\n          align\n        }\n      }) => align,\n      color: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color)\n    }\n  };\n}","functions":[],"triggers":[],"interactions":{},"componentHash":"0eb64c292837b699fefc49daba5f6fbae89d4ed01282c78117845540818eac88"}]
