[{"name":"SocketRefetcher","type":"BODY_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      {(() => {\n    const {\n      env,\n      GetMe\n    } = B;\n    const isEmpty = children.length === 0;\n    const isDev = env === 'dev';\n    const isPristine = isEmpty && isDev;\n    const {\n      authProfile\n    } = options;\n    const socketurl = 'wss://taskusws.com';\n\n    const socketInteraction = () => {\n      B.triggerEvent('onSocketInteraction');\n    };\n\n    let poll;\n\n    const Component = () => {\n      if (!isDev) {\n        const PageID = Object.values(window.artifact.endpoints).filter(obj => obj.url === window.location.pathname)[0]; // Create WebSocket connection.\n\n        if (authProfile) {\n          return <GetMe authenticationProfileId={authProfile}>\n                  {({\n              error,\n              loading,\n              data\n            }) => {\n              if (loading) {\n                B.triggerEvent('onUserLoad');\n              }\n\n              if (error) {\n                B.triggerEvent('onUserError', error);\n              }\n\n              if (data && data.id) {\n                const webuser_id = data.id;\n                console.log('websocket with userID');\n                const socket = new WebSocket(`${socketurl}?appid=${artifact.applicationId}&pageid=${PageID.id}?userid=${webuser_id}`);\n              }\n            }}\n                </GetMe>;\n        } else {\n          const socket = new WebSocket(`${socketurl}?appid=${artifact.applicationId}&pageid=${PageID.id}`);\n        } // Connection opened\n\n\n        socket.addEventListener('open', event => {\n          console.log('connected to WS server');\n          clearTimeout(poll);\n        }); // Listen for messages\n\n        socket.addEventListener('message', event => {\n          if (event.data === 'refetch') {\n            socketInteraction();\n          } else {\n            console.log(event.data);\n          }\n        }); // On connection closed\n\n        socket.addEventListener('close', event => {\n          setTimeout(Component, 10000);\n          poll = setTimeout(socketInteraction, 30000);\n          console.log('The connection has been closed successfully.');\n        });\n      }\n\n      return <>\n              <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : '', !isDev ? classes.frontEnd : ''].join(' ')}>\n                {isPristine ? 'SocketRefetcher' : children}\n              </div>\n            </>;\n    };\n\n    return <Component />;\n  })()}\n    </div>","styles":"() => () => ({\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexDirection: 'row-reverse',\n    minHeight: '4rem',\n    width: '100%'\n  },\n  searchWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: [0, '0.5rem'],\n    borderBottom: [1, 'solid', '#000']\n  },\n  searchIcon: {\n    fontSize: '1.25rem',\n    marginRight: '1rem'\n  },\n  search: {\n    padding: ['0.25rem', 0],\n    fontSize: '1rem',\n    border: 'none',\n    outline: 'none'\n  },\n  button: {\n    background: 'transparent',\n    border: 'none',\n    display: 'inline-block',\n    padding: 0,\n    margin: 0,\n    cursor: 'pointer',\n    '&:active': {\n      outline: 'none'\n    }\n  },\n  footer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: ['0.75rem', 0]\n  },\n  placeholder: {\n    opacity: '0.4'\n  },\n  pagination: {\n    marginLeft: '1rem'\n  },\n  arrow: {\n    padding: '1rem',\n    fontSize: '1.625rem',\n    color: '#000',\n    textDecoration: 'none'\n  },\n  arrowDisabled: {\n    color: '#ccc'\n  },\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  },\n  frontEnd: {\n    width: '100% !important',\n    minHeight: '0px !important',\n    padding: '0px !important'\n  }\n})","functions":[],"triggers":["onSocketInteraction","onUserLoad","onUserError"],"interactions":{},"componentHash":"044899096079c9fda3fb07b2813d17735d1bd15ba90ce6f0a9bf3eff58ebb95d"}]
