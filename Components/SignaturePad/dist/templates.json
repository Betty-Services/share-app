[{"name":"SignaturePad","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    getCustomModelAttribute,\n    useText\n  } = B;\n  const SignaturePad = window.SignaturePad;\n  const {\n    Input,\n    FormHelperText,\n    InputLabel\n  } = window.MaterialUI.Core;\n  const {\n    helperText,\n    penColor,\n    error,\n    validationValueMissing,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute,\n    height,\n    width\n  } = options;\n  const isDev = env === 'dev';\n  const {\n    id: customModelAttributeId,\n    label = []\n  } = customModelAttributeObj;\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  const requiredText = required ? '*' : '';\n  const [errorState, setErrorState] = useState(error);\n  const [value, setValue] = useState('');\n  const signaturePadRef = useRef(null);\n  const [helper, setHelper] = useState(useText(helperText));\n  B.defineFunction('ClearSignature', () => {\n    setValue('');\n    signaturePadRef.current.clear();\n  });\n\n  const handleChange = () => {\n    console.log(\"handle change!\");\n\n    if (!signaturePadRef.current.isEmpty()) {\n      const image = signaturePadRef.current.toDataURL();\n      const splittedImage = image.split(',');\n      setValue(splittedImage[splittedImage.length - 1]);\n    }\n  };\n\n  const handleValidation = validation => {\n    setErrorState(!validation.valid);\n    const message = useText(validationValueMissing) || useText(helperText);\n    setHelper(message);\n  };\n\n  const invalidHandler = event => {\n    event.preventDefault();\n    const {\n      target: {\n        validity\n      }\n    } = event;\n    handleValidation(validity);\n  };\n\n  const Control = () => <>\n\t\t\t\t<InputLabel classes={{\n      root: classes.label\n    }}>\n\t\t\t\t\t{hideLabel ? '' : `${labelText}${requiredText}`}\n\t\t\t\t</InputLabel>\n\t\t\t\t<div className={[classes.signaturePad].join(' ')} onMouseUp={handleChange}>\n\t\t\t\t\t<SignaturePad ref={signaturePadRef} redrawOnResize={true} options={{\n        penColor: penColor,\n        onEnd: handleChange\n      }} canvasProps={{\n        width: width,\n        height: height - 16\n      }} />\n\n\t\t\t\t\t<Input classes={{\n        input: classes.input\n      }} name={nameAttributeValue || customModelAttributeName} value={value} required={required} onInvalid={invalidHandler} onChange={invalidHandler} error={errorState} />\n\t\t\t\t</div>\n\t\t\t\t{helper && <FormHelperText className={errorState ? classes.error : classes.helper}>\n\t\t\t\t\t\t{helper}\n\t\t\t\t\t</FormHelperText>}\n\t\t\t</>;\n\n  return isDev ? <div className={classes.root}>{Control()}</div> : Control();\n})()","styles":"B => t => {\n  const {\n    color: colorFunc,\n    env,\n    Styling\n  } = B;\n  const style = new Styling(t);\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      boxSizing: 'border-box',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    signaturePad: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height - 16,\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      display: 'inline-block',\n      border: '1px solid',\n      borderRadius: '4px',\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => [style.getColor(borderColor), '!important']\n    },\n    label: {\n      height: '16px',\n      marginLeft: '0!important',\n      pointerEvents: env === 'dev' && 'none',\n      alignItems: 'start!important',\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      }\n    },\n    helper: {\n      color: ({\n        options: {\n          helperColor\n        }\n      }) => [style.getColor(helperColor), '!important']\n    },\n    error: {\n      color: ({\n        options: {\n          errorColor\n        }\n      }) => [style.getColor(errorColor), '!important']\n    },\n    input: {\n      display: 'none !important'\n    },\n    control: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    span: {\n      flex: 1,\n      textAlign: 'start',\n      marginBottom: '0.1875rem!important',\n      marginRight: '1rem!important'\n    },\n    messageContainer: {\n      flexWrap: 'wrap',\n      paddingTop: '1.25rem',\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [getOpacColor(style.getColor(textColor), 0.54), '!important']\n      }\n    },\n    listView: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    },\n    gridView: {\n      display: 'flex'\n    },\n    gridItem: {\n      display: 'flex',\n      borderRadius: '0.3125rem',\n      flexDirection: 'column',\n      border: ' 0.0625rem solid #eee',\n      marginRight: '1rem',\n      marginBottom: '1rem'\n    },\n    gridItemDetails: {\n      maxWidth: ({\n        options: {\n          imagePreviewWidth,\n          showImagePreview\n        }\n      }) => showImagePreview ? imagePreviewWidth : 'auto',\n      display: 'flex',\n      margin: '1rem',\n      justifyContent: 'space-between'\n    },\n    deleteIcon: {\n      color: `${t.colors.light}!important`\n    },\n    remove: {\n      height: '1.875rem',\n      padding: '0.25rem!important'\n    }\n  };\n}","functions":["ClearSignature"],"triggers":[],"interactions":{},"componentHash":"9474891b69d54db37bc8c79045315407297034110d4765db36c5b365390f21d5"}]
