[{"name":"PDFViewer","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Page,\n    Document\n  } = window.PDF;\n  const pdfjs = window.pdfjs;\n  const {\n    pdf,\n    showPagination,\n    labelNumberOfPages,\n    verticalPaginationPosition,\n    showAllPages\n  } = options;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [pageNumber, setPageNumber] = useState(1);\n  const file = useText(pdf);\n  const pagination = showPagination && !showAllPages;\n  const parsedLabel = useText(labelNumberOfPages) + ' ';\n  const paginationLabel = parsedLabel.replace(' x ', ` ${pageNumber} `).replace(' y ', ` ${numberOfPages} `);\n  B.defineFunction('Go to previous page', () => changePage(-1));\n  B.defineFunction('Go to next page', () => changePage(1));\n  useEffect(() => {\n    if (!isDev) {\n      if (pageNumber <= 1) {\n        B.triggerEvent('onNoPreviousPagePresent');\n      } else {\n        B.triggerEvent('onPreviousPagePresent');\n      }\n\n      if (pageNumber >= numberOfPages) {\n        B.triggerEvent('onNoNextPagePresent');\n      } else {\n        B.triggerEvent('onNextPagePresent');\n      }\n    }\n  }, [pageNumber, numberOfPages]);\n\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumberOfPages(numPages);\n    B.triggerEvent('onSuccess');\n  };\n\n  const changePage = offset => {\n    setPageNumber(prevPageNumber => prevPageNumber + offset);\n  };\n\n  const PDFViewerComponent = <div className={classes.pdfWrapper}>\n\t\t\t\t{pagination && verticalPaginationPosition === 'top' && <div className={classes.paginationWrapper}>\n\t\t\t\t\t\t<p>{paginationLabel}</p>\n\t\t\t\t\t</div>}\n\t\t\t\t<Document file={`data:application/pdf;base64,${file}`} options={{\n      cMapUrl: `//cdn.jsdelivr.net/npm/pdfjs-dist@${pdfjs.version}/cmaps/`,\n      cMapPacked: true\n    }} externalLinkTarget='_blank' loading='' onLoadSuccess={onDocumentLoadSuccess} onSourceError={error => B.triggerEvent('onError', error)} onLoadError={error => B.triggerEvent('onError', error)}>\n\t\t\t\t\t{showAllPages ? Array.from(new Array(numberOfPages), (el, index) => <Page key={`page_${index + 1}`} pageNumber={index + 1} />) : <Page pageNumber={pageNumber} />}\n\t\t\t\t</Document>\n\n\t\t\t\t{pagination && verticalPaginationPosition === 'bottom' && <div className={classes.paginationWrapper}>\n\t\t\t\t\t\t<p>{paginationLabel}</p>\n\t\t\t\t\t</div>}\n\t\t\t</div>;\n  return isDev ? <div className={classes.root}>PDF Viewer</div> : PDFViewerComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '2rem',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      textAlign: 'center'\n    },\n    pdfWrapper: {\n      width: 'fit-content'\n    },\n    paginationWrapper: {\n      textAlign: ({\n        options: {\n          horizontalPaginationPosition\n        }\n      }) => horizontalPaginationPosition\n    }\n  };\n}","functions":["Go to previous page","Go to next page"],"triggers":["onNoPreviousPagePresent","onPreviousPagePresent","onNoNextPagePresent","onNextPagePresent","onSuccess","onError","onError"],"interactions":{},"componentHash":"988da540f09b00d58e402ed44bb7ff34ae0bc7f442ce5837f297e5662bfb9e70"}]
