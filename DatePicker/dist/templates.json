[{"name":"CustomDateTimePicker","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    enableDates,\n    setDates,\n    model,\n    filter,\n    enabledDateProperty,\n    disabled,\n    minDate,\n    maxDate,\n    initialFocusDate,\n    error,\n    placeholder,\n    disableManual,\n    variant,\n    clearable,\n    autoOk,\n    inputvariant,\n    type,\n    dateFormat,\n    timeFormat,\n    dateTimeFormat,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    disableToolbar,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    use24HourClockDateTime,\n    use24HourClockTime,\n    nameAttribute,\n    locale\n  } = options;\n  const {\n    env,\n    getCustomModelAttribute,\n    useText,\n    getProperty,\n    useAllQuery,\n    useFilter\n  } = B;\n  const {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n    KeyboardDateTimePicker\n  } = window.MaterialUI.Pickers;\n  const {\n    DateFnsUtils\n  } = window.MaterialUI;\n  const {\n    nlLocale,\n    enLocale\n  } = window.MaterialUI.DateLocales;\n  const {\n    AccessTime,\n    Event\n  } = window.MaterialUI.Icons;\n  const DateFns = new DateFnsUtils();\n  const isDev = env === 'dev';\n  const [selectedDate, setSelectedDate] = useState(null);\n  const helper = useText(helperText);\n  const placeholderText = useText(placeholder);\n  const enabledDatesProp = getProperty(enabledDateProperty) || {};\n  const [enabledDates, setEnabledDates] = useState([]);\n  const [open, setOpen] = useState(false);\n  const localeMap = {\n    nl: nlLocale,\n    en: enLocale\n  };\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const strDefaultValue = useText(defaultValue);\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n\n  const isValidDate = date => date instanceof Date && !isNaN(date);\n\n  const parsedInitialFocusDate = defaultValue.length > 0 ? new Date(strDefaultValue) : useText(initialFocusDate) !== '' ? new Date(useText(initialFocusDate)) : new Date();\n  const parsedMinDate = useText(minDate);\n  const parsedMaxDate = useText(maxDate);\n  const [currentDate, setCurrentDate] = useState(parsedInitialFocusDate);\n\n  const monthChanged = date => {\n    setCurrentDate(date);\n  };\n\n  const getFirstDayOfTheMonth = () => {\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n\n    if (enabledDatesProp.kind === 'date') {\n      firstDay.setMinutes(currentDate.getMinutes() - currentDate.getTimezoneOffset());\n      return firstDay.toJSON().slice(0, 10);\n    }\n\n    return firstDay.toISOString();\n  };\n\n  const getLastDayOfTheMonth = () => {\n    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n\n    if (enabledDatesProp.kind === 'date') {\n      lastDay.setMinutes(currentDate.getMinutes() - currentDate.getTimezoneOffset());\n      return lastDay.toJSON().slice(0, 10);\n    }\n\n    return lastDay.toISOString();\n  };\n\n  if (!isDev && enableDates) {\n    const mergedFilter = { ...filter,\n      ...{\n        [enabledDatesProp.id]: {\n          gteq: getFirstDayOfTheMonth(),\n          lteq: getLastDayOfTheMonth()\n        }\n      }\n    };\n    const {\n      loading,\n      error: err,\n      data: {\n        results\n      } = {},\n      refetch\n    } = model && useAllQuery(model, {\n      filter: mergedFilter,\n      skip: 0,\n      take: 200,\n\n      onCompleted(res) {\n        const hasResult = res && res.results && res.results.length > 0;\n\n        if (hasResult) {\n          setEnabledDates(res.results.map(item => item[enabledDatesProp.name]));\n          B.triggerEvent('onSuccess', res.results);\n        } else {\n          B.triggerEvent('onNoResults');\n        }\n      },\n\n      onError(resp) {\n        B.triggerEvent('onError', resp);\n      }\n\n    });\n  }\n\n  const changeHandler = date => {\n    setSelectedDate(date);\n  };\n\n  const setDefaultDate = (defaultFormat, givenFormat) => {\n    if (!selectedDate && strDefaultValue) {\n      const propDefaultParse = defaultFormat ? DateFns.parse(strDefaultValue, defaultFormat) : new Date(strDefaultValue);\n      const formatDefaultParse = DateFns.parse(strDefaultValue, givenFormat);\n\n      if (isValidDate(propDefaultParse)) {\n        setSelectedDate(propDefaultParse);\n      } else if (isValidDate(formatDefaultParse)) {\n        setSelectedDate(formatDefaultParse);\n      } else {\n        setSelectedDate(DateFns.parse('00:00:00', 'HH:mm:ss'));\n      }\n    }\n  };\n\n  const disableDates = date => {\n    const compareDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toJSON().slice(0, 10);\n    const matchingDate = enabledDates.find(dateItem => dateItem === compareDate);\n\n    if (matchingDate != undefined) {\n      return setDates === 'enable' ? false : true;\n    }\n\n    return setDates === 'enable' ? true : false;\n  };\n\n  B.defineFunction('Clear', () => setSelectedDate(null));\n  let DateTimeComponent;\n  let format;\n  let resultString;\n  let use24HourClock = true;\n\n  switch (type) {\n    case 'date':\n      {\n        DateTimeComponent = KeyboardDatePicker;\n        format = dateFormat || 'dd/MM/yyyy';\n        setDefaultDate('yyyy-MM-dd', format);\n        resultString = isValidDate(selectedDate) ? DateFns.format(selectedDate, 'yyyy-MM-dd') : null;\n        break;\n      }\n\n    case 'datetime':\n      {\n        DateTimeComponent = KeyboardDateTimePicker;\n        format = dateTimeFormat || 'dd/MM/yyyy HH:mm:ss';\n        use24HourClock = use24HourClockDateTime;\n        setDefaultDate(null, format);\n        resultString = isValidDate(selectedDate) ? new Date(selectedDate).toISOString() : null;\n        break;\n      }\n\n    case 'time':\n      {\n        DateTimeComponent = KeyboardTimePicker;\n        format = timeFormat || 'HH:mm:ss';\n        use24HourClock = use24HourClockTime;\n        setDefaultDate('HH:mm:ss', format);\n        resultString = isValidDate(selectedDate) ? DateFns.format(selectedDate, 'HH:mm:ss') : null;\n        break;\n      }\n\n    default:\n  }\n\n  const DateTimeCmp = <DateTimeComponent open={open} initialFocusedDate={parsedInitialFocusDate} minDate={parsedMinDate || undefined} maxDate={parsedMaxDate || undefined} name={nameAttributeValue || customModelAttributeName} value={selectedDate} size={size} classes={{\n    root: classes.formControl\n  }} variant={variant} clearable={clearable} autoOk={autoOk} placeholder={placeholderText} fullWidth={fullWidth} onChange={changeHandler} onMonthChange={monthChanged} onClick={() => disableManual ? setOpen(true) : null} onClose={() => setOpen(false)} inputVariant={inputvariant} InputProps={{\n    inputProps: {\n      name: nameAttributeValue || customModelAttributeName,\n      tabIndex: isDev && -1,\n      readOnly: disableManual ? true : false\n    }\n  }} KeyboardButtonProps={{\n    tabIndex: isDev && -1\n  }} required={required} disabled={disabled} label={!hideLabel && labelText} error={error} margin={margin} helperText={helper} disableToolbar={disableToolbar} format={format} PopoverProps={{\n    classes: {\n      root: classes.popover\n    }\n  }} DialogProps={{\n    className: classes.dialog\n  }} ampm={!use24HourClock} shouldDisableDate={disableDates} keyboardIcon={type === 'time' ? <AccessTime onClick={() => setOpen(true)} /> : <Event onClick={() => setOpen(true)} />} />;\n  return isDev ? <div className={classes.root}>\n\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={localeMap[locale]}>\n\t\t\t\t\t{variant === 'static' ? <div className={classes.static}>{DateTimeCmp}</div> : DateTimeCmp}\n\t\t\t\t</MuiPickersUtilsProvider>\n\t\t\t</div> : <MuiPickersUtilsProvider utils={DateFnsUtils} locale={localeMap[locale]}>\n\t\t\t\t<input type='hidden' name={nameAttributeValue || customModelAttributeName} value={resultString} />\n\t\t\t\t{variant === 'static' ? <div className={classes.static}>{DateTimeCmp}</div> : DateTimeCmp}\n\t\t\t</MuiPickersUtilsProvider>;\n})()","styles":"B => t => {\n  const {\n    Styling\n  } = B;\n  const style = new Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    dialog: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      },\n      '& .MuiButton-textPrimary': {\n        color: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    popover: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    formControl: {\n      '& > label': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        zIndex: ({\n          options: {\n            inputvariant\n          }\n        }) => inputvariant === 'standard' ? 1 : null,\n        '&.Mui-focused': {\n          color: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        },\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    },\n    static: {\n      '& .MuiPickersStaticWrapper-staticWrapperRoot': {\n        '& .MuiToolbar-root, & .MuiPickersDay-daySelected': {\n          backgroundColor: ({\n            options: {\n              backgroundColorPopup\n            }\n          }) => [style.getColor(backgroundColorPopup), '!important']\n        }\n      }\n    }\n  };\n}","functions":["Clear"],"triggers":["onSuccess","onNoResults","onError"],"interactions":{},"componentHash":"857b86f0c3d55ea7a8de407f188987e2d0185e3e3a436ed63dc824c04307c4c2"}]
